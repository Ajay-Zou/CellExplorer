{
  
  "0": {
    "title": "Capabilities",
    "content": "The Cell Explorer is a graphical user interface that allow you to explore your data on a single cell level. Each of the plots are interactive using your mouse and keyboard. . Classification . You can do direct classification in the GUI. The following types of classification can be performed. . Putative cell type: You can create new cell types directly in the GUI. | Brain region: Allen institute atlas. | Deep-superficial: Deep superficial assignment can be done in the Cell Explorer cell-wise and in a separate gui channel-wise. | Labels: You can assign your own labels to any cell. | Tags: A selection of predetermined tags can also be assigned. | Ground truth cell types: Ground truth data can be analysed directly in the GUI. | . Interface for deep-superfial classification . Monosynaptic connections . Monosynaptic connections are determined in the pipeline, and you can visualize the connections in the GUI and redo the manual curation directly from the GUI. You can adjust connections from the Cell Explorer by launching the monosyn interface. . Interface for adjustment of monosynaptic connections . Reference data . To help you characterize your own data, you can load reference data provided by our lab. . Ground truth data . There are a subset of ground truth cell types provided. . Share cell metrics in your publications or with your peers . You can save your combined cell metrics from a study into a single mat file that can be shared together with a publication. This allows peers to verify your classification or use your cell metrics directly. You can save the mat file from the Cell Explorer from the menu File -&gt; Save classification. . Export figures . Work in batch-mode while handle metrics on a single session level . Using the Cell Explorer on a batch of sessions, will load metrics into one struct allowing you to visualize and classify your data across recordings and classify cells across sessions, while still maintaining the data handling on a single session level, writing your changes back to the original files. You can save metrics from a batch of sessions, and still load the data back into the Cell Explorer. . Autosave . The Cell Explorer automatically saves your manual curation every 6 classification action (actions include changes to cell-type, deep-superficial assignment and brain region). You can turn this feature off or adjust the autosave-interval in preferences. The autosave only saves your progress to the workspace and you have to save your changes to the original cell_metrics file through the Cell Explorer interface. . Database capabilities . The Cell Explorer is capable of loading datasets from and writing to the Buzsaki lab database. Please setup your credentials and local paths as described here. .",
    "url": "http://localhost:4000/interface/capabiliities/",
    "relUrl": "/interface/capabiliities/"
  }
  ,"1": {
    "title": "Custom calculations",
    "content": "The Cell Explorer pipeline has a subfolder for calculations to exist outside the main pipeline, such that updates can be applied without affecting your own additions to the pipeline. Please save your scripts to the folder calc_CellMetrics/+customCalculations/ and follow the template already in that folder to integrate your own calculations into the regular pipeline. . Your metrics has to follow the Cell Explorer “cell_metrics standard”:https://github.com/petersenpeter/Cell-Explorer/wiki/Adding-your-own-metrics. . function cell_metrics = template(cell_metrics,session,spikes,spikes_all) % This is a example template for creating your own calculations % % INPUTS % cell_metrics cell_metrics struct % session session struct with session-level metadata % spikes spikes struct filtered by manipulation intervals % spikes_all spikes struct with all spikes % % OUTPUT % cell_metrics updated cell_metrics struct end .",
    "url": "http://localhost:4000/pipeline/custom-calculations/",
    "relUrl": "/pipeline/custom-calculations/"
  }
  ,"2": {
    "title": "Custom single cell plots",
    "content": "Custom single cell plots can be created and loaded in the Cell Explorer. Custom plot functions must be located in the subfolder /+customPlots. Each plot must be saved individually, for them to be loaded in the Cell Explorer. There is a template available to get you started: . function subsetPlots = template(cell_metrics,UI,ii,col) % This is a example template for creating your own custom single cell plots % % INPUTS % cell_metrics cell_metrics struct % UI the struct with figure handles, settings and parameters % ii index of the current cell % col color of the current cell % % OUTPUT % subsetPlots a struct with any extra single cell plots from synaptic partner cells % .xaxis x axis data (Nx1), where N is the number of samples % .yaxis y axis data (NxM), where M is the number of cells % .subset list of cellIDs (Mx1) subsetPlots = []; plot(cell_metrics.waveforms.time{ii},cell_metrics.waveforms.filt_zscored(:,ii),&#39;-&#39;,&#39;Color&#39;,col) end . Your custom plot must accept the same inputs as defined in the template. .",
    "url": "http://localhost:4000/interface/custom-single-cell-plots/",
    "relUrl": "/interface/custom-single-cell-plots/"
  }
  ,"3": {
    "title": "Data structure and format",
    "content": ". Data paths | Data structures Cell metrics | Session metadata | Spikes | Firing rate maps | Events | Manipulations | Channels | Time series | | Data paths . For each session there are two main paths that the Cell Explorer uses, a basepath and a clusteringpath (relative to basepath). . The basepath contains the raw data and session level files. The data in the basepath should follow this naming convention: sessionName.*, e.g. sessionName.dat and sessionName.lfp (lowpass filtered and downsampled. The lfp file is automatically generated in the pipeline if necessary). The metadata is stored in a sessionName.session.mat file located in the basepath. . The clusteringpath contains the spike data, including cell metrics. The cell metrics are all stored in a cell_metrics struct/file. . Data structures . Cell metrics . The cell metrics are kept in a cell_metrics struct as described here. The cell metrics are stored in: sessionName.cell_metrics.cellinfo.mat in the clustering path. . Session metadata . A Matlab struct (session), stored in a .mat file: sessionName.session.mat. The session struct contains all session-level metadata. The session struct can be generated using the sessionTemplate.m and visualized with gui_session.m. It is structured by data types as defined below: . general name : name of session | investigator : investigator of the session | projects : projects the session belong to | date : date the session was recorded | time : start time of the session | location : location where the session took place | experimenters : who performed the experiments | duration : the total duration of the session (seconds) | sessionType : type of session (chronic/acute) | notes : any notes | . | animal name : name of animal | sex : sex of animal | species : species of animal | strain : strain of animal | geneticLine : genetic line of animal | . | epochs name | behavioralParadigm | builtMaze | mazeType | manipulations | startTime | stopTime | . | extracellular equipment : hardware used to acquire the data | fileFormat : format of the raw data | sr : sample rate | nChannels : number of channels | nSamples : number of samples | nElectrodeGroups : number of electrode groups | electrodeGroups (struct) : struct with definition of electrode groups (1-indexed) | nSpikeGroups : number of spike groups | spikeGroups (struct) : struct with definition of spike groups (1-indexed) | precision : e.g. signed int16. | leastSignificantBit : range/precision in µV. Intan system: 0.195µV/bit | srLFP : sample rate of the LFP file | electrode : struct with implanted electrodes siliconProbes : name of the probe | company : company producing the probe | nChannels : number of channels | nShanks : number of shanks | AP_coordinates : Anterior-Posterior coordinates(mm) | ML_coordinates : Medial-Lateral coordinates (mm) | depth : implant depth (mm) | brainRegions : implant brain region acronym (Allen institute Atlas) | . | . | brainRegions regionAcronym : e.g. CA1 or HIP, Allen institute Atlas brainRegion | channels : list of channels | electrodeGroups : list of electrode groups | . | . | channelTags tagName (e.g. Theta, Cortical, Ripple, Bad) channels : list of channels (1-indexed) | electrodeGroups : list of electrode groups (1-indexed) | . | . | behavioralTracking equipment : hardware used to acquire the data | filenames : file names containing the tracking | framerate : frame rate of the tracking | notes | . | inputs inputTag : unique name, e.g. temperature, stimPulses,OptitrackTTL equipment : hardware used to acquire the data | inputType : adc, aux, dat, dig … | channels : list of channels (1-indexed) | description | . | . | analysisTags tagName: the numeric or string values saved in the tag | . | spikeSorting method : e.g. Kilosort | format : Phy, KiloSort, KlustaViewer, Klustakwik, … | relativePath : relative to base/sessionpath | channels : list of channels selected. | spikeSorter : Person performed the manual spike sorting | notes | cellMetrics : (boolean) if the cell metrics has been run | manuallyCurated : (boolean) if manual curation has been performed | . | timeseries typeTag : unique type (adc, aux, dat, dig …) fileName : file name | precision : e.g. int16 | nChannels : number of channels | sr : sample rate | nSamples : number of samples | leastSignificantBit : range/precision in µV. Intan system: 0.195µV/bit | equipment : hardware used to acquire the data | . | . | . The sessionName.session.mat files should be stored in the basepath. . Spikes . A Matlab struct (spikes), stored in a .mat file: sessionName.spikes.cellinfo.mat. It can be generated with loadSpikes.m. The Cell Inspector’s pipeline (calc_CellMetrics.m) used the script loadSpikes.m, to automatically load spike-data from either Kilosort/Phy or Neurosuite and saves it to a spikes struct. The struct has the following fields: . ts: a 1xN cell-struct for N units each containing a 1xM vector with M spike events in samples. | times: a 1xN cell-struct for N units each containing a 1xM vector with M spike events in seconds. | cluID: a 1xN vector with inherited IDs from the applied clustering algorithm. | UID: a 1xN vector with values 1:N. | shankID: a 1xN vector containing the corresponding shank/spikegroup each unit (1-indexed). | maxWaveformCh: a 1xN vector with the channel for the maximum waveform for the units (0-indexed) | maxWaveformCh1: a 1xN vector with the channel for the maximum waveform for the units (1-indexed) | total: a 1xN vector with the total number of spikes for each unit. | peakVoltage: a 1xN vector with spike waveform amplitude (µV). | filtWaveform: a 1xN cell-struct with spike waveforms from maxWaveformChannel (µV). | filtWaveform_std: a 1xN cell-struct with the std of the spike waveforms (µV). | rawWaveform: a 1xN cell-struct with raw spike waveforms (µV). | rawWaveform_std: a 1xN cell-struct with std of the raw spike waveforms (µV). | timeWaveform: a 1xN cell-struct with spike timestamps for the waveforms (ms). | numcells: number of cells. | sessionName: name of the session (string). | spindices: a Kx2 matrix where the first column contains the K spike times for all units and the second column contains the unit index for each spike. | processinginfo: a substruct with information about how the spikes was generated including the name of the function, version, date and the parameters. | . Any extra field can be added with info about the units, e.g. the theta phase of each spike for the units, or the position/speed of the animal for each spike. sessionName.spikes.cellinfo.mat should be located in the clusteringpath. . Firing rate maps . A Matlab struct (ratemap) containing firing rat maps, stored in a .mat file: sessionName.ratemap.firingRateMap.mat with the following fields: . map: a 1xN cell-struct for N units each containing a KxL matrix, where K corresponds to the bin count and L to the number of states. States can be trials, manipulatio states, left-right states… | x_bins: a 1xK vector with K bin values used to generate the firing rate map. | state_labels: a 1xL vector with char labels describing the states. | . The processed spike data should be stored in the clusteringpath. . Events . A Matlab struct (eventName), stored in a .mat file: sessionName.eventName.events.mat with the following fields: . timestamps: Px2 matrix with intervals for the P events in seconds. | peaks: Event time for the peak of each events in seconds (Px1). | amplitude: amplitude of each event (Px1). | amplitudeUnits: specify the units of the amplitude vector. | eventID: numeric ID for classifying various event types (Px1). | eventIDlabels: cell array with labels for classifying various event types defined in stimID (cell array, Px1). | eventIDbinary: boolean specifying if eventID should be read as binary values (default: false). | center: center time-point of event (in seconds; calculated from timestamps; Px1). | duration: duration of event (in seconds; calculated from timestamps; Px1). | detectorinfo: info about how the events were detected. | . The *.events.mat files should be stored in the basepath. . Manipulations . A Matlab struct (manipulationName), stored in a .mat file: sessionName.eventName.manipulation.mat with the following fields: . timestamps: Px2 matrix with intervals for the P events in seconds. | peaks: Event time for the peak of each events in seconds (Px1). | amplitude: amplitude of each event (Px1). | amplitudeUnits: specify the units of the amplitude vector. | eventID: numeric ID for classifying various event types (Px1). | eventIDlabels: cell array with labels for classifying various event types defined in stimID (cell array, Px1). | eventIDbinary: boolean specifying if eventID should be read as binary values (default: false). | center: center time-point of event (in seconds; calculated from timestamps; Px1). | duration: duration of event (in seconds; calculated from timestamps; Px1). | detectorinfo: info about how the events were detected. | . The *.manipulation.mat files should be stored in the basepath. . Channels . A matlab struct (ChannelName), stored in a .mat file: sessionName.ChannelName.channelinfo.mat with the following fields: . channel: a 1xQ vector containing a list of Q channel indexes (0-indexed) | channelClass: a 1xQ cell with classification assigned to each channel (char) | processinginfo: a struct with information about how mat file was generated including the name of the function, version, date and the parameters. | detectorinfo: If the channelinfo struct is based on determined events, detectorinfo contains info about how the event was processed. | . The *.channelinfo.mat files should be stored in the basepath. . Time series . A Matlab struct (timeserieName), stored in a .mat file: sessionName.timeserieName.timeseries.mat with the following fields: . channel: a 1xQ vector containing a list of Q channel indexes (0-indexed) | timestamps: a 1xQ cell with classification assigned to each channel (char) | processinginfo: a struct with information about how mat file was generated including the name of the function, version, date and the parameters. | . Any other field can be added to the struct containing time series data. The *.timeseries.mat files should be stored in the basepath. .",
    "url": "http://localhost:4000/pipeline/data-structure-and-format/",
    "relUrl": "/pipeline/data-structure-and-format/"
  }
  ,"4": {
    "title": "Ground truth data",
    "content": "A small selection of ground truth cells are included. This list will be expanded with a greater selection and cell count. The plan is to ultimately do classification from ground truth cell metrics so if you have opto-tagged data that you are interested in sharing/including, please reach out to me. . You can also implement your own ground truth cells into the pipeline or do the classification in the Cell Explorer. Once classified you can share your metrics list with collaborators or provide them for publications. . Classifying your cells in the Cell Explorer . How the classification done .",
    "url": "http://localhost:4000/interface/ground-truth-data/",
    "relUrl": "/interface/ground-truth-data/"
  }
  ,"5": {
    "title": "Home",
    "content": "Cell Explorer . The Cell Explorer is a graphical user interface (GUI) and standardized pipeline for exploring and classifying spike sorted single units acquired using extracellular electrodes. . Get started now View it on GitHub . . Installation . Download the repository and add it to your Matlab setpath. The pipeline uses CCGHeart.c. to calculate the CCGs. Compiled versions are included for Windows and Mac. If you are using Linux you have to compile the script. In Matlab, go to Cell-Explorer/calc_CellMetrics/CCG/ and run this line: . mex -O CCGHeart.c . The Cell Explorer GUI and pipeline have uses six toolboxes (four required toolboxes are included in the repository in the folder toolboxes, and two Matlab toolboxes must be installed manually). . Toolbox dependencies . GUI Layout toolbox (Graphical elements in Cell Explorer) | JSONLab Matlab toolbox (required for db tools) | UMAP Matlab toolbox (clustering in Cell Explorer) | IoSR Matlab Toolbox (lfp filtering in pipeline) | Curvefit Matlab toolbox (ACG fit in pipeline; install manually) | Signal Processing Toolbox (gausswin; install manually) | . Try the Cell Explorer with example data . There is an example dataset included in the repository. Load the mat-file ‘cell_metrics_batch.mat’ into Matlab and type: . CellExplorer(&#39;metrics&#39;,cell_metrics). . Tutorial for running the pipeline on your data . There is a tutorial script: CellExplorer_Tutorial.m included for running the pipeline on your data. . Please use below DOI for citing the Cell Explorer in your research and publications: . Petersen, Peter Christian, &amp; Buzsáki, György. (2020, January 10). The Cell Explorer: a graphical user interface and a standardized pipeline for exploring and classifying single cells (Version 1.1). Zenodo. http://doi.org/10.5281/zenodo.3604173 . .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  ,"6": {
    "title": "Graphical interface",
    "content": ". [[https://buzsakilab.com/wp/wp-content/uploads/2019/11/Cell-Explorer-Interface-description-1.png]] . *** Introduction The interface consists of 4-9 main plots, where the top row is dedicated to population level representations of the cells and the other plots are [[https://github.com/petersenpeter/Cell-Explorer/wiki/Single-cell-plot-options][selectable and customizable plots for individual cells]] (including variations of waveforms, ACGs, ISIs, CCGs, PSTHs, response curves and firing rate maps). The surrounding interface consists of 7 panels placed on either side of the graphs: On the right side there is a navigation panel, cell assignment panel, display settings panel, and on the left side a plot selection panel, color group panel and a table with cell metrics. The panels are described in details below. Further there is a text field for custom text filter, a message log and figure legends. There are [[https://github.com/petersenpeter/Cell-Explorer/wiki/Keyboard-shortcuts][keyboard shortcuts]] that allow you to quickly navigate your data. Press H in the cell Explorer to learn Keyboard shortcuts. . *** Navigation and cell selection The Navigation panel allows you can navigate and select which cell to display. . Right arrow: navigate to the next cell (n+1). . | Left arrow: navigate to the previous cell (n-1). . | GoTo: Opens a dialog box that allows you go to a specific cell number or to a specific session, when visualizing a batch of sessions. . | . Mouse actions in plots . Left mouse click: go to nearest cell. | Right mouse click: select nearest cell. Cell point/trace is highlighted and Cell ID is displayed for selected cell(s). | Middle mouse click: activate a group selection function allowing you to draw a polygon (with left mouse clicks) to select multiple cells (finish with a right mouse click; delete points with middle mouse click). | Mouse scroll wheel: zoom in or out at the location of the mouse cursor. When zooming on one of the axis, only that dimension is zoomed. | . *** Cell Assignment The Cell Assignment panel allows you to perform relevant types of cell-assignments such as cell-type, Deep/Superficial, assign Brain region or Labels. . Cell-type list: You can assign/alter cell-type of the current cell by clicking a cell-type on the list. . | O Polygon: Perform cell classification on a group of cells by drawing a polygon circling the points in either of the scatter plots, waveforms, or ACGs. . | Cell-type: Allows you to add a new cell type. | . | Region: Brain region assignment of the selected cell according to the Allan Institute Brain Atlas. . | Label: Assign a label to the selected cell. Labels are saved to the cell_metrics structure. | . *** Display Settings The Display Settings panel allows you to customize the plots in the Cell Explorer. Cell-type list: Defines the displayed cell-types. Layout: Adjust the layout and number of cell specific plots to display: 1+3 -&gt; 3+6 1.-6. view: A dropdown for each of the cell plots containing available options like the Firing rate map, tSNE plots, Sharp wave-ripple, Autocorrelogram, waveform, all plots associated with the selected cell. . ACGs: display selected, all or a t-SNE scatter plot of ACGs. . MonoSyn: [None/Selected/All] Display monosynaptic connections for selected cell or for all cells. All: all connections are highlighted in black in the top row scatter plots. Selected: for the selected cell, the ingoing connections are shown with black lines, the outgoing in magenta. The synaptic connected partners’ curves are also displayed in the custom plot. . Display synaptic connections: You can select in which of the plots you want the mono-synaptic connections displayed, using the toggles for the three main scatter plots. . *** Plot selection The plot selection panel allows you to customize the first scatter plot, select what data to display, change the axis type, adjust the plotting style and the color groups. . Select X,Y and Z data: Allows you to select what metrics that are displayed on the X,Y and Z axes respectively. . Log X, Y and Z: Define if a linear or log scale will be used for the X, Y and Z axes respectively. . Show Z: Whether to display the third axis. . Select plot style: Allows you to display a double histogram along the X and Y axes. A smooth or a stairs histogram can be selected. Only the X and Y axes are displayed here. . Select color group: A dropdown menu with cell-array metrics, which allows you to group the cells according to these metrics including, Deep-Superficial, Brain regions and Labels. When selecting another option than cell-types, two new menu items appears below the dropdown that allows you to select a subset of groups in the scatter plots, and further combine this selection with a potential subset selection in Cell types. . Group by cell-type: Allows you to define a subset of cells that fulfills both the selection in cell-types and the selection in color group, but group the data according to cell types. . *** Filter by free text A filter field is located in the top left corner of the interface. You can filter by text strings or by specific criteria from numeric fields. You can further combine criteria by and/or logic e.g.: . Filter by text string “MS” and firing rate &gt; 5Hz: #+BEGIN_EXAMPLE MS &amp; .firingRate &gt; 5 #+END_EXAMPLE . Filter by MS or HIP: #+BEGIN_EXAMPLE MS | HIP #+END_EXAMPLE . Filter by ab_ratio &gt; 1 and troughToPeak &gt; 0.6ms #+BEGIN_EXAMPLE .ab_ratio &gt; 1 &amp; .troughToPeak &gt; 0.6 #+END_EXAMPLE . *** Metrics table The table contains all numeric values for the selected cell and is updated as you navigate the interface. The table can show two types of data: A list of cell metrics and associated values for the selected cell or a list of all cells with selection marker, and two other metrics. Use the menu Table data to customize what is displayed in the table. . *** Message log At the bottom of the interface, there is a message log showing details about the actions performed. You can click it to see the full list of commands with timestamps. .",
    "url": "http://localhost:4000/interface/interface/",
    "relUrl": "/interface/interface/"
  }
  ,"7": {
    "title": "Keyboard shortcuts",
    "content": "Keyboard shortcuts allow you to quickly interact with your data in the Cell Explorer. Pressing H in the cell Explorer will show available shortcuts. A + (plus) sign indicate that the key must be combined with command/control (Mac/Windows). . *** Navigation . &lt; : Navigate to next cell | : Navigate to previous cell . | . : Navigate to next cell with same class | , : Navigate to previous cell with same class | +G : Go to a specific cell | Page Up : Next session in batch (only in batch mode) | Page Down : Previous session in batch (only in batch mode) | Numpad0 : Navigate to first cell | Numpad1-9 : Navigate to next cell with that numeric class | . *** Cell assignment actions . 1-9 : Assign Cell-types | +B : Assign Brain region | +L : Assign Label | plus : Add Cell-type | +Z : Undo assignment | +R : Reclassify cell types | . *** Display . M : Show/Hide menubar | N : Change layout (6, 5 or 4 subplots) | +E : Highlight excitatory cells (triangles) | +I : Highlight inhibitory cells (circles) | +F : Display ACG fit | K : Calculate and display significance matrix for all metrics (KS-test) | T : (Re)calculate tSNE space from a selection of metrics | W : Show waveform metrics | +Y : Perform ground truth cell type classification | +U : Load ground truth cell types | Space : Show action dialog for selected cells | . *** Other shortcuts . H : Open list of keyboard shortcuts . | +P : Open preferences for the Cell Explorer | +C : Open file directory of the selected cell | +D : Open sessions in the Buzsaki lab database | +A : Load spike data | +J : Adjust mono-synaptic connections for selected session | +V : Visit the Github wiki | .",
    "url": "http://localhost:4000/interface/keyboard-shortcuts/",
    "relUrl": "/interface/keyboard-shortcuts/"
  }
  ,"8": {
    "title": "Loading sessions from the database",
    "content": "Sessions described in the database can be loaded directly in the Cell Explorer. Below dialog can be opened from the file menu in the Cell Explorer. . .",
    "url": "http://localhost:4000/database/loading-sessions/",
    "relUrl": "/database/loading-sessions/"
  }
  ,"9": {
    "title": "Preferences",
    "content": "Allows the user to customize the cell Explorer. Preferences are located in CellExplorer_Preferences.m. Below the preferences and options are described in details. . *** Display settings . customCellPlotIn1-6 : incomplete list: ‘Single waveform’,’All waveforms’,’All waveforms (image)’,’Single raw waveform’,’All raw waveforms’,’Single ACG’,’All ACGs’,’All ACGs (image)’,’CCGs (image)’,’Sharp wave-ripple’ . | ACG_type : [‘Normal’ (100ms), ‘Wide’ (1s), ‘Narrow’ (30ms)] | monoSynDispIn: [‘None’, ‘Selected’, ‘All’] | plotCountIn : [‘GUI 1+3’,’GUI 2+3’,’GUI 3+3’,’GUI 3+4’,’GUI 3+5’,’GUI 3+6’] | metricsTableType : [‘Metrics’,’Cells’,’None’] | plotWaveformMetrics : [0,1] | dispLegend : [0,1] *** Initial data displayed in the customPlot | plotXdata : ‘firingRate’ | plotYdata : ‘peakVoltage’ | plotZdata : ‘troughToPeak’ | % Autosave settings UI.settings.autoSaveFrequency : 6 UI.settings.autoSaveVarName : ‘cell_metrics’ . *** Cell type classification definitions . cellTypes: {‘Unknown’, ‘Pyramidal Cell 1’, ‘Pyramidal Cell 2’, ‘Pyramidal Cell 3’, ‘Narrow Interneuron’, ‘Wide Interneuron’}; | deepSuperficial: {‘Unknown’, ‘Cortical’, ‘Deep’, ‘Superficial’}; | *** Cell type classification colors . cellTypeColors : [ [.5,.5,.5];[.2,.2,.8];[.2,.8,.2];[0.2,0.8,0.8];[.8,.2,.2];[0.8,0.2,0.8] ]; | *** Fields used to define the tSNE space . tSNE_calcWideAcg : boolean | tSNE_calcNarrowAcg : boolean | tSNE_calcFiltWaveform : boolean | tSNE_calcRawWaveform : boolean | *** List of fields to use in the general tSNE representation . tSNE_metrics : {‘FiringRate’, ‘ThetaModulationIndex’, ‘BurstIndex_Mizuseki2012’, ‘TroughToPeak’, ‘AB_ratio’, ‘BurstIndex_Royer2012’, ‘ACG_tau_rise’, ‘ACG_tau_burst’, ‘ACG_h’, ‘ACG_tau_decay’, ‘CV2’, ‘BurstIndex_Doublets’, ‘ThetaPhaseTrough’, ‘ThetaEntrainment’, ‘derivative_TroughtoPeak’}; | tSNE_dDistanceMetric : default ‘seuclidean’ | *** Highlighting excitatory and inhibitory cells . displayInhibitory = boolean | displayExcitatory = boolean | % Firing rate map setting showHeatmap : boolean showLegend : boolean showHeatmapColorbar : boolean .",
    "url": "http://localhost:4000/interface/preferences/",
    "relUrl": "/interface/preferences/"
  }
  ,"10": {
    "title": "Database",
    "content": ". Preparation for using the Buzsaki lab database Add your db credentials | Define paths to data repositories | Test db connection | | The public data in the database can be loaded as reference data, and can be accessed without providing credentials, but login credentials are necessary for full functionality of the database. . Preparation for using the Buzsaki lab database . To use the Buzsaki lab database with the Cell Explorer, there are two necessary steps you have to do in Matlab: add your credentials and define the repository paths. Public reference data can still be used without credentials. . Add your db credentials . Once the Cell Explorer has been added to your Matlab Set Path, you should provide your buzsakilab.com credentials in the file db_credentials.m. In the Matlab Command Window type: . edit db_credentials.m . In the Matlab file, replace the two lines below with your credentials: . credentials.username = &#39;user&#39;; . credentials.password = &#39;password&#39;; . Define paths to data repositories . Paths are generated from the repository definition in the database. Here you need to define the root path for each repository in db_local_repositories.m. To use the NYUshare_Datasets (the NYU share dataset directory), you must define the system path to the repository, e.g.: . repositories.NYUshare_Datasets = &#39;/Volumes/buzsakilab/Buzsakilabspace/Datasets&#39;; . Likewise to link to data located in NYUshare_Peter, provide the system path to the repository: . repositories.NYUshare_Peter = &#39;/Volumes/buzsakilab/peterp03/IntanData&#39;; . This system allows you to define paths that are specific to each computer-system and separates system-access from the data storage solution, which could be a local drive hard drive, a centralized network storage, or another storage solutions. . Test db connection . Now you can test the connection by typing: . sessionTest = &#39;Peter_MS10_170307_154746_concat&#39;; . sessions = db_load_sessions(&#39;sessionName&#39;,sessionTest); . session = sessions{1}; . If succesfull it will create the session struct in your workspace containing metadata for that session. You can learn more about the data structure and format here. . There are a couple of database example calls in the Matlab script db_example.m located in the db folder. .",
    "url": "http://localhost:4000/database/preparation/",
    "relUrl": "/database/preparation/"
  }
  ,"11": {
    "title": "Use public data as reference",
    "content": "We are sharing a large set of cells that is available to explore or use as reference data for classifying your own data. . Any sessions located on the repository NYUshare_Datasets is publicly available and can be downloaded and loaded directly in the Cell Explorer, without providing any database credentials. Upon request the data will be downloaded from our public web share and saved to the local Cell Explorer directory referenceData/ for future access. . .",
    "url": "http://localhost:4000/database/public-data/",
    "relUrl": "/database/public-data/"
  }
  ,"12": {
    "title": "Running pipeline",
    "content": ". Instructions for running the pipeline from a data path | Instructions for running the pipeline using the Buzsaki lab database | Running the Cell Explorer in batch mode | Instructions for running the pipeline from a data path . The pipeline follows the data standards described here. Saving your data in the specified data formats, integrates your data better with the Cell Explorer, allowing you to plot spike rasters and event histograms among other things. . To run the pipeline from a session struct, please see this example sessionTemplate.m file for how to format this properly. You can edit the template to fit to your data. . session = sessionTemplate; . You can also view the session struct in a GUI: . session = gui_session(session); . To run the pipeline from the Matlab Command Window from the session struct type: . cell_metrics = calc_CellMetrics(&#39;session&#39;, session); . You can also run it directly from a basepath and generate the session struct directly: . cell_metrics = calc_CellMetrics; . When calling the pipeline with the sessionTemplate, a GUI will be shown allowing you to edit the metadata both for the input parameters and the session struct. . Once complete, view the result in the Cell Explorer by typing: . cell_metrics = CellExplorer(&#39;metrics&#39;,cell_metrics); . Instructions for running the pipeline using the Buzsaki lab database . The Cell Explorer pipeline uses a single Matlab struct for handling metadata. The struct is automatically loaded from the buzsaki lab database if you are running the pipeline with the database, and is located in the base path once a session has been processed. To run the pipeline on a session named ‘PetersSession’ using the database type: . cell_metrics = calc_CellMetrics(&#39;sessionName&#39;,&#39;PetersSession&#39;); . To view the result in the Cell Explorer type: . cell_metrics = CellExplorer(&#39;metrics&#39;,cell_metrics); . Running the Cell Explorer in batch mode . To open multiple sessions together you can run the Cell Explorer in batch mode. Below is an example for running the Cell Explorer on three sessions from the database: . sessionNames = {&#39;sessionName1&#39;,&#39;sessionName2&#39;,&#39;sessionName3&#39;}; . cell_metrics = LoadCellMetricBatch(&#39;sessions&#39;,sessionNames); . cell_metrics = CellExplorer(&#39;metrics&#39;,cell_metrics); . As you perform classifications in the Cell Explorer, you may save back to the original cell metrics stored with the sessions defined above. You can perform the batch mode from a list of paths as well. .",
    "url": "http://localhost:4000/pipeline/running-pipeline/",
    "relUrl": "/pipeline/running-pipeline/"
  }
  ,"13": {
    "title": "Single cell plot options",
    "content": "The single cells can be plotted with various plot options: . waveforms | ACGs | ISIs | CCGs | PSTHs | response curves | Firing rate maps | . You can create your own custom plots, which can be loaded and displayed in the Cell Explorer, by saving plot function in the customPlots folder. . Waveforms . There are three types of waveform plots: single waveform with noise curves in absolute amplitude, z-scored waveforms across population, and color plot with same z-scored waveforms. Further there are filtered and unfiltered waveform plot options. . Autocorrelograms . There are three types of autocorrelograms (ACGs) all normalized to firing rates: single ACG, population plot and a color plot with z-scored ACGs. Further there are three ACG types: [-50ms:0.5ms:50ms], [-500ms:1ms:500ms] and a log10 [1ms:10s]. . . ISI distributions . Three types of log10 ISI distributions: single ISI distribution with the addition from ACG shown in the same plot, all the ISIs for the whole population, and a color plot with z-scored ISIs across the population. The normalization can further be set to three different values: occurrence, rate (normalized by bin size), and instantaneous firing rates (1/ISIs). . . Firing rate maps . . Response curves . Response curves are generally . PSTHs . PSTHs can be shown for either sessionName..psth.mat files or for sessionName..events.mat. They are standard aligned to the onset of the event, but can also be aligned to the peak, center or offset. . Spike rasters . The raw spiking data can also be loaded. Click here to learn more about how to generate the spike raster plots. . Group action plots . . Multiplot options and figure exporting . .",
    "url": "http://localhost:4000/interface/single-cell-plot-options/",
    "relUrl": "/interface/single-cell-plot-options/"
  }
  ,"14": {
    "title": "Spike and event data",
    "content": "The Cell Explorer is capable of loading the raw spike and event data which allows for creating custom raster plots and histograms from the raw spike and events. . !https://buzsakilab.com/wp/wp-content/uploads/2019/11/Cell-Explorer-spike-dialog.png()! . You can define spike raster plots directly in the Cell Explorer using above dialog, or you can save custom plots that are loaded automatically in the Cell Explorer every time. Custom spikes plots are located at +customSpikesPlots/. There is a spikes_template available to get you started: . function spikePlot = spikes_template % This is a example template for creating your own custom spike raster plots % % OUTPUT % spikePlot: a struct containing all settings % Spikes struct parameter spikePlot.x = &#39;pos_linearized&#39;; % x data spikePlot.y = &#39;theta_phase&#39;; % y data spikePlot.x_label = &#39;Position (cm)&#39;; % x label spikePlot.y_label = &#39;Theta phase&#39;; % y label spikePlot.state = &#39;&#39;; % state data [ideally integer] spikePlot.filter = &#39;speed&#39;; % any data used as filter spikePlot.filterType = &#39;greater than&#39;; % [none, equal to, less than, greater than] spikePlot.filterValue = 20; % filter value % Event related parameters (if applicable) spikePlot.event = &#39;&#39;; spikePlot.eventType = &#39;event&#39;; % [event,manipulation,state] spikePlot.eventAlignment = &#39;peak&#39;; % [onset, offset, center, peak] spikePlot.eventSorting = &#39;amplitude&#39;; % [none, time, amplitude, duration] spikePlot.eventSecBefore = 0.2; % in seconds spikePlot.eventSecAfter = 0.2; % in seconds spikePlot.plotRaster = 0; % [binary] show raster spikePlot.plotAverage = 0; % [binary] show average response spikePlot.plotAmplitude = 0; % [binary] show amplitude for each event on a separate y-axis plot spikePlot.plotDuration = 0; % [binary] show event duration for each event on a separate y-axis plot spikePlot.plotCount = 0; % [binary] show spike count for each event on a separate y-axis plot end .",
    "url": "http://localhost:4000/interface/spike-and-event-data/",
    "relUrl": "/interface/spike-and-event-data/"
  }
  ,"15": {
    "title": "Standard cell metrics",
    "content": ". Standard metrics General metrics | Spike events based metrics | Waveform based metrics | PCA feature based metrics | ACG &amp; CCG based metrics | Sharp wave ripple metrics | Theta oscillation metrics | Spatial metrics | Firing rate stability metrics | Other metrics | | The Cell Explorer used a single Matlab struct for handling all cell metrics called ‘cell_metrics’. The ‘cell_metrics’ struct consists of four types of fields for handling different types of data: double, char cells and structs. Each field should be defined for all cells in the session (1xnCells). Single numeric values are saved to numeric fields with double precision, and character/string fields are saved in char cells. Time series data like waveforms and session parameters are stored in standard struct fields: . general: basename, basepath, clusteringpath, cellCount, ccg, processinginfo. The general fields also contains a list of timestamps for timeseries metrics. | acg: autocorrelograms. Three types: wide [-1000ms:1ms:1000ms], narrow [-50:0.5:50] and log10 [log-intervals spanning 1ms:10s]. | isi: log10 [log-intervals spanning 1ms:10s]. | waveforms: contains the average waveforms of the cells. raw: raw average waveform. filt: filtered waveforms (highpass filtered above 500Hz). | putativeConnections: putative connections determined from cross correlograms. Contains two fields: excitatory and inhibitory, each contains connections pairs. | events: event time series. | firingRateMaps: (spatial) firing rate maps. | manipulations: manipulations time series. | responseCurves: response curves. | . Standard metrics . General metrics . putativeCellType: Putative cell type | brainRegion: Brain region acronyms from Allan institute Brain atlas. | animal: Unique name of animal. | sex: Sex of the animal [Male, Female, Unknown] | species: Animal species [Rat, Mouse,…] | strain: Animal strain [Long Evans, C57B1/6,…] | geneticLine: Genetic line of the animal | spikeGroup: Spike group: Shank number / spike group. | labels: Custom labels. | . Spike events based metrics . spikeCount: Spike count of the cell from the entire session. | firingRate: Firing rate in Hz: Spike count normalized by the interval between the first and the last spike. | cv2: Coefficient of variation (CV2), https://www.ncbi.nlm.nih.gov/pubmed/8734581. | refractoryPeriodViolation: Refractory period violation (‰): Fraction of ISIs less than 2ms. | burstIndex_Mizuseki2012 Burst index: Fraction of spikes with a neighboring ISI &lt; 6ms as defined in Mizuseki et al. Hippocampus 2012. | . Waveform based metrics . waveforms: Spike waveform struct with below fields filt: Average filtered spike waveform from channel with max amplitude. Highpass filtered above 500Hz to standardize waveforms. | raw: Average raw spike waveform from channel with max amplitude. | time: Time vector for average raw spike waveform from channel with max amplitude. | . | maxWaveformCh: Max channel zero-indexed: The channel where the spike has the largest amplitude. | maxWaveformCh1: Max channel one-indexed: The channel where the spike has the largest amplitude. | troughToPeak: Trough-to-peak latency is defined from the trough to the following peak of the waveform. | Waveform asymmetry: the ratio between the two positive peaks (peakB-peakA)/(peakA+peakB) | peakVoltage: Peak voltage (µV) Defined from the channel with the maximum waveform (highpass filtered). max(waveform)-min(waveform). | . PCA feature based metrics . Isolation distance and L-ratio as defined by Schmitzer-Torbert et al. Neuroscience. 2005. . isolationDistance: Isolation distance. | lRatio: L-ratio. | . ACG &amp; CCG based metrics . Theta modulation index is defined by the difference between the theta modulation trough (mean of autocorrelogram bins 50-70 ms) and the theta modulation peak (mean of autocorrelogram bins 100-140ms) over their sum. Autocorrelogram fits with time constants are fitted with a double-exponential equation ( fit = cexp(-x/τ_decay)-dexp(-x/τ_rise) ) | synapticEffect: Synaptic effect | ACG tau rise (ms) | ACG tau decay (ms) | ACG tau bursts (ms) | ACG refractory period (ms) | ACG fit R-square | Burst index (Royer 2012) | Burst index doublets | synapticConnectionsIn: Synaptic ingoing connections count | synapticConnectionsOut: Synaptic outgoing connections count | . Sharp wave ripple metrics . ripples_modulationIndex: strength of ripple modulation of the firing rate) | ripples_modulationPeakResponseTime: Ripple peak delay. Calculated from a ripple triggered average. The delay between the ripple peak and the peak response of the ripple triggered average response. | deepSuperficial: Deep-Superficial region assignment [Unknown, Cortical, Superficial, Deep]. | deepSuperficialDistance: Deep Superficial depth relative to the reversal of the sharp wave. (in um). | . Theta oscillation metrics . thetaPhasePeak: Theta phase peak | thetaPhaseTrough: Theta phase trough | thetaEntrainment: Theta entrainment | thetaModulationIndex: Theta modulation index. determined from the ACG. | . Spatial metrics . The spatial metrics are all based on average firing rate map. . spatialCoverageIndex: Spatial coverage index. Defined from the inverse cumulative distribution, where bins are sorted by decreasing rate. The 75 percentile point defines the spatial coverage by the fraction of bins below and above the point (defined by Royer et al., NN 2012) | spatialGiniCoeff: Spatial Gini coefficient. Defined as the Gini coefficient of the firing rate map. | spatialCoherence: Spatial Coherence. Defined by the degree of correlation between the firing rate map and a hollow convolution with the same map (reference?) | spatialPeakRate: Spatial peak firing rate (Hz). Defined as the peak rate from the firing rate map. | placeFieldsCount: Number of place fields. Defined as the number of intervals along the firing rate map that fulfills a number of spatial criteria: minimum rate of 2Hz and above 10% of the maximum firing rate bin and minimum of 4 connecting bins. The cell further has to have a spatial coherence greater than 0.6 (Mizuseki et al ?). | placeCell: Place cell (binary, determined from the Mizuseki spatial metrics) | . Firing rate stability metrics . firingRateGiniCoeff : The Gini coefficient of the firing rate across time. | firingRateStd : Standard deviation of the “firing rate across time” divided by the mean. | firingRateInstability : Mean of the absolute differential “firing rate across time” divided by the mean. abs(diff(firingRateAcrossTime)) | . Other metrics . Promoter | .",
    "url": "http://localhost:4000/pipeline/standard-cell-metrics/",
    "relUrl": "/pipeline/standard-cell-metrics/"
  }
  ,"16": {
    "title": "Adding your own metrics",
    "content": "*** Adding your own numeric or string metrics You can add your own metrics either as numeric values or string arrays. String arrays allow you to group your data by the unique strings set within features, and can be plotted in discrete values. All features in the cell metrics are automatically available in the cell inspector if they contain N values (N: number of cells). . *** Adding your own custom plot (e.g. spike triggered average response) response curves, event histograms, firing rate maps, manipulations and other plots should be saved into predefined subfields. To categorize, a few field names (plot types) are available: . responseCurves (e.g. thetaPhase) | events (any sessionName.*.events.mat file in the basepath will create an event response curve aligned at event start). | manipulations (any sessionName.*.manipulation.mat file in the basepath will create an event response curve per cell aligned at event start). | states | firingRateMaps (any sessionName.firingRateMaps.cellinfo.mat file in the basepath will create a firing rate map per cell). | psth | This schema allows you to easily add a PSTH or a histogram to better characterize your cells. . The x-axis (the x-bins) can be specified by including a vector with M values in a subfield named after the metric in the structure cell_metrics.general.plotType.plotName.x_bins. State labels (state_label) and axis labels (x_label, y_label) can also be defined in this general field. See the Test dataset for how to format this correctly. . *** Spike data The cell explorer is also capable of loading the raw spike data from a sessionName.spikes.cellInfo.mat file. This is useful for when you want to create a raster psth, see the spike times across trials or time, or plot a phase precession map. [[https://github.com/petersenpeter/Cell-Explorer/wiki/Spike-and-event-data][Use the spikes menu in the Cell Explorer]], and if the current selected cell has spiking data in the data folder, the Cell explorer will load the data and show you plotting options. After this initial step the spikes plotting options will appear with the other cell-specific plotting options in the 6 dropdowns in the Display Settings panel. .",
    "url": "http://localhost:4000/pipeline/your-own-metrics/",
    "relUrl": "/pipeline/your-own-metrics/"
  }
  
}